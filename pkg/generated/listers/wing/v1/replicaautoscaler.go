/*
Copyright 2022 xScaling.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/xscaling/wing-api/api/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicaAutoscalerLister helps list ReplicaAutoscalers.
// All objects returned here must be treated as read-only.
type ReplicaAutoscalerLister interface {
	// List lists all ReplicaAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ReplicaAutoscaler, err error)
	// ReplicaAutoscalers returns an object that can list and get ReplicaAutoscalers.
	ReplicaAutoscalers(namespace string) ReplicaAutoscalerNamespaceLister
	ReplicaAutoscalerListerExpansion
}

// replicaAutoscalerLister implements the ReplicaAutoscalerLister interface.
type replicaAutoscalerLister struct {
	indexer cache.Indexer
}

// NewReplicaAutoscalerLister returns a new ReplicaAutoscalerLister.
func NewReplicaAutoscalerLister(indexer cache.Indexer) ReplicaAutoscalerLister {
	return &replicaAutoscalerLister{indexer: indexer}
}

// List lists all ReplicaAutoscalers in the indexer.
func (s *replicaAutoscalerLister) List(selector labels.Selector) (ret []*v1.ReplicaAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ReplicaAutoscaler))
	})
	return ret, err
}

// ReplicaAutoscalers returns an object that can list and get ReplicaAutoscalers.
func (s *replicaAutoscalerLister) ReplicaAutoscalers(namespace string) ReplicaAutoscalerNamespaceLister {
	return replicaAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicaAutoscalerNamespaceLister helps list and get ReplicaAutoscalers.
// All objects returned here must be treated as read-only.
type ReplicaAutoscalerNamespaceLister interface {
	// List lists all ReplicaAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ReplicaAutoscaler, err error)
	// Get retrieves the ReplicaAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ReplicaAutoscaler, error)
	ReplicaAutoscalerNamespaceListerExpansion
}

// replicaAutoscalerNamespaceLister implements the ReplicaAutoscalerNamespaceLister
// interface.
type replicaAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicaAutoscalers in the indexer for a given namespace.
func (s replicaAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1.ReplicaAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ReplicaAutoscaler))
	})
	return ret, err
}

// Get retrieves the ReplicaAutoscaler from the indexer for a given namespace and name.
func (s replicaAutoscalerNamespaceLister) Get(name string) (*v1.ReplicaAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("replicaautoscaler"), name)
	}
	return obj.(*v1.ReplicaAutoscaler), nil
}
